# Authenticate using Amazon Cognito User Pools
# Replace 'YourCognitoUserPoolName' with the actual name of your Cognito User Pool resource in your AWS account
# or provide the User Pool ID directly if you prefer.
# Ensure this User Pool is configured as an authorization provider in your AppSync API settings.

schema {
    query: Query
    mutation: Mutation
}

type Query {
    # Fetches a response from the chatbot
    # sessionId is used to maintain conversation context
    getChatbotResponse(sessionId: String!, userQuery: String!): ChatMessage @aws_cognito_user_pools
    # Fetches the conversation history for a given session
    getConversationHistory(sessionId: String!): ConversationHistory @aws_cognito_user_pools
}

type Mutation {
    # Posts a message to the chatbot and gets a response
    # This can be an alternative to getChatbotResponse if you prefer mutations for actions with side effects
    # like storing history, which is what we'll do.
    postMessage(sessionId: String!, userQuery: String!): ChatMessage @aws_cognito_user_pools
}

# Represents a single message in the chat (either from user or bot)
type ChatMessage {
    sessionId: String!
    messageId: String! # Unique ID for the message
    userId: String! # From Cognito
    userQuery: String
    botResponse: String
    createdAt: AWSDateTime!
    isUserMessage: Boolean! # True if this is the user's query, false if it's the bot's response part of the turn
}

# Represents the full conversation history for a session
type ConversationHistory {
    sessionId: String!
    messages: [ChatMessage!]!
}

# Input type for posting a message (optional, can also use arguments directly)
# input PostMessageInput {
#   sessionId: String!
#   userQuery: String!
# }